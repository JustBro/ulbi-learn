// webpack работает в среде node.js, поэтому нам доступен стандартный модуль path
// с помощью которого мы можем работать с путями к файлам
import path from 'path';
// webpack - это модуль, который будет использоваться для работы с webpack
import webpack from 'webpack';
// HTMLWebpackPlugin - это плагин, который будет использоваться для работы с html файлами
import HTMLWebpackPlugin from 'html-webpack-plugin';

const config: webpack.Configuration = {
    // mode - это режим, в котором будет работать webpack
    // development - в этом режиме в билде будет отладочная информация
    // production - в этом режиме в билде не будет отладочной информации
    mode: 'development',
    // __dirname - это абсолютный путь к текущей директории в которой находится файл webpack.config.js
    // src - это директория, в которой находится наш код
    // index.ts - это файл, который мы будем использовать как точку входа в наш проект
    entry: path.resolve(__dirname, 'src', 'index.ts'),
    // output - это директория, в которую будет сохранен результат сборки
    // filename - это имя файла, которое будет содержать результат сборки
    // path - это абсолютный путь к директории, в которую будет сохранен результат сборки
    output: {
        // [name] - это имя файла, которое будет содержать результат сборки
        // [contenthash] - это хэш, который будет содержать результат сборки, он нужен чтобы избежать кэширования браузером, когда мы обновляем код файла, а название файла остается прежним
        filename: '[name].[contenthash].js',
        // path - это абсолютный путь к директории, в которую будет сохранен результат сборки
        path: path.resolve(__dirname, 'build'),
        // clean - это флаг, который будет удалять в директории build все лишние файлы, которые были созданы при прошлой сборке, допустим с другими хэшами
        clean: true
    },
    plugins: [
        // HTMLWebpackPlugin - это плагин, который будет создавать файл index.html в директории build
        // template - это путь к файлу, который будет использоваться как шаблон для создания файла index.html
        // в этом файле будет подключен наш бандл js (файл в который собирается наш код, сейчас это main.[hash].js)
        new HTMLWebpackPlugin({
            template: path.resolve(__dirname, 'public', 'index.html')
        }),
        // ProgressPlugin - это плагин, который будет отображать прогресс сборки в консоли
        new webpack.ProgressPlugin()
    ],
    // module - это конфигурация лоадеров, которая будет использоваться для обработки файлов
    // которые выходят за рамки js, например png, jpg, gif, svg, css, scss, ts и т.д.
    module: {
        // rules - это массив правил, которые будут использоваться для обработки файлов
        rules: [
            {
                // test - это регулярное выражение, которое будет использоваться для определения файлов, которые будут обрабатываться
                // в данном случае мы обрабатываем файлы с расширениями ts, tsx
                test: /\.tsx?$/,
                // use - это лоадер, который будет использоваться для обработки файлов
                use: {
                    // loader - это лоадер, который будет использоваться для обработки файлов
                    // в данном случае мы используем ts-loader для обработки файлов с расширениями ts, tsx
                    loader: 'ts-loader',
                    // options - это опции, которые будут использоваться для обработки файлов
                    options: {
                        // transpileOnly - это опция, которая будет использоваться для ускорения сборки, она позволяет не компилировать файлы, а только транслировать их
                        transpileOnly: true,
                        // configFile - это путь к файлу конфигурации tsconfig.json, он нужен для того чтобы ts-loader знал как компилировать файлы
                        configFile: path.resolve(__dirname, 'tsconfig.json')
                    }
                },
                // exclude - это регулярное выражение, которое будет использоваться для исключения файлов, которые не будут обрабатываться
                // в данном случае мы исключаем директорию node_modules, так как там находятся сторонние библиотеки, которые не нужно обрабатывать
                exclude: /node_modules/,
            }
        ]
    },
    // resolve - это конфигурация, которая будет использоваться для разрешения расширений файлов
    // при импорте файлов, webpack будет искать файлы с этими расширениями и нам не нужно указывать расширения вручную
    resolve: {
        // extensions - это массив расширений файлов, которые будут использоваться при импорте файлов для поиска
        extensions: ['.ts', '.js', '.tsx']
    }
}

export default config;