import path from "path";
import webpack from "webpack";

const buildLoaders = (tsConfigFilePath: string): webpack.RuleSetRule[] => {
  // Плагина нужно назначат в переменные и потом добавлять в массив
  // чтобы контролироватьь и видеть порядок загрузки плагинов
  const tsLoader: webpack.RuleSetRule = {
    // test - это регулярное выражение, которое будет использоваться для определения файлов, которые будут обрабатываться
    // в данном случае мы обрабатываем файлы с расширениями ts, tsx
    test: /\.tsx?$/,
    // use - это лоадер, который будет использоваться для обработки файлов
    use: {
      // loader - это лоадер, который будет использоваться для обработки файлов
      // в данном случае мы используем ts-loader для обработки файлов с расширениями ts, tsx
      loader: "ts-loader",
      // options - это опции, которые будут использоваться для обработки файлов
      options: {
        // transpileOnly - это опция, которая будет использоваться для ускорения сборки, она позволяет не компилировать файлы, а только транслировать их
        transpileOnly: true,
        // configFile - это путь к файлу конфигурации tsconfig.json, он нужен для того чтобы ts-loader знал как компилировать файлы
        configFile: tsConfigFilePath,
      },
    },
    // exclude - это регулярное выражение, которое будет использоваться для исключения файлов, которые не будут обрабатываться
    // в данном случае мы исключаем директорию node_modules, так как там находятся сторонние библиотеки, которые не нужно обрабатывать
    exclude: /node_modules/,
  };

  return [tsLoader];
};

export { buildLoaders };
